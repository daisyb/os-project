		     +--------------------------+
       	             |		CS 140		|
		     | PROJECT 2: USER PROGRAMS	|
		     | 	   DESIGN DOCUMENT     	|
		     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Daisy Barbanel    <dbarbanel@uchicago.edu>
Raphael Hallerman <rhallerman@uchicago.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			   ARGUMENT PASSING
			   ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

None.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

We mostly just followed the guide in stack-args.txt.  First we pushed
(using the given push() function) the whole commandline to the stack.
Then we broke the command line up using strtok_r and pushed the user
address of each argument. To make sure the elements of argv[] were in
the right order we made a function that reversed the order of the 
argument user addresses, since we originally pushed them in left to right
order.

We then pushed the rest of the necessary stack arguments: argv, argc,
and the userpage pointer, translating to user addresses where
necessary.

 ---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

Because strtok_r() is safer for multithread programming. strtok() uses
global memory to store its progress through a string, so if multiple
calls to strtok() are performed at once, as is very likely in
multithreaded programs like pintos, the parsing will be performed
incorrectly. In contrast, strtok_r() allows each thread to keep track
of its own saveptr, so there is less risk of two threads trying to
access the same memory store at once during parsing.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation. Identify at least two advantages of the Unix
approach.

1) Having the shell do parsing reduces the number of context switches
needed when attempting to execute invalid executables/arguments. For
instance if the user tries to execute a program that it does not have
the proper permissions for, the shell can check this and throw an
error without ever having to perform an expensive trap to the OS.

2) Having the shell do parsing adds an extra layer of security. Having
the OS execute commands and arguments passed by users introduces some
level of insecurity to the system since the OS has more lowlevel
access than users. This security risk can be mitigated by having the
shell do premilimanry checks on user inputs before they are passed to
the OS.

			     SYSTEM CALLS
			     ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

typedef int pid_t;  // process id

struct file_descriptor {
  int handle;			/* the file's unique integer identifier */
  struct file* file;		/* the file* to be used by filesys.c and file. functions */
  struct list_elem elem;	/* to place each file_descriptor struct in processes' lists of open files */
};

/* Struct for sharing info between child processes and parents */
struct process {
  pid_t pid;                    /* Process Id */
  int exit_status;              /* Exit Status of process, default -1 */
  bool loaded;                  /* Whether the process has been loaded successfully or not */
  struct  file* executable;     /* Executable to close after process runs */
  struct semaphore sema_exit;   /* semaphore to signal waiting parents. Init to 0 */
  struct semaphore sema_load;   /* semaphore to signal that process has loaded. Init to 0 */
  struct list fd_list;		/* List of file descriptors. */
  struct list_elem elem;        /* List element for children list of parent */
};

struct thread
  {  
  ...

    bool is_processs;                   /* Whether the thread is a process - set to true in start_process() */
    struct list children;               /* List of child processes */
    struct process *process;            /* Shared data btwn process and parent. Allocated and filled by child, freed by parent (unless is_process is false).*/
 ...
  };

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

Every time that a file is opened, the process that opened it receives a unique integer called a file descriptor. When multiple process open the same file, they are still all given unique file descriptors to it. The processes can then use these identifiers to interact with the filesystem and the open files that they have access to. This is how the filesystem can track which files are open by which processes, so file descriptors are unique within the entire OS, not just within a single process.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

Before anything else, we always check the pointer to the user data, to make sure that it is valid. Then, before we interact with this data whatsoever, we make sure to acquire the filesys_lock, which makes sure that the kernel data is not altered in the middle of the reading or writing process by another process. Apart from special cases like reading from STDIN or writing to STDOUT, we then simply call file_read and file_write, and return their return values, which correspond to the number of bytes read or written.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

For both a full page of data and 2 bytes of data, the greatest possible number of inspections of the page table is 2, and the lowest possible number is 1. This is because for both of these numbers, it is possible for the data to lie across the boundary between pages, in which case the OS would need to call pagedir_get_page() to translate the remaining virtual addresses. Since each of these sizes is equal to or smaller than a full page, it is possible for each to lie entirely within a single page, in which case only one invokation of pagedir_get_page() would suffice. More than 2 invokations, however, would be impossible, since each of these sizes cannot span more than two pages. The only room for improvement in these numbers would be to always have them both be 1, which would require that every piece of data be placed solely within one page. This would require extra computing during memory allocation/virtualization, so the improvement would likely not actually increase overall system efficiency. 

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

Each thread has a pointer to a process struct which contains it's pid,
exit status, load status, and semaphores. When a process is created
it's parent adds its process struct to it's list of child
processes. When wait is called on a pid the parent will search its
list for the process struct entry which matches that pid and down a
semaphore for waiting that lives in the process struct. Before the
child thread exits it will update exit status on the process struct
and up the semaphore. When the child thread exits it will free its
thread struct but the process struct will remain on the heap so that
the parent can still access it and retrieve its child's exit status
after it wakes up. The parent is then responsible for freeing the
process struct.
 
>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

We have two functions copy_in() (provided) and copy_in_string() which
copy data from the user space to the kernel space (mostly by calling
get_user()), all the while checking that any accessed user address is
valid. We also have a function, is_valid_pointer() which checks that
user pointers whose values are not copied into the kernel space are
still valid. If any of these three functions encounter an invalid
pointer, they free any kernel pages allocated during this process and
then call sys_exit(-1) which frees the offending thread.

Give an example:

Calling sys_read (2, NULL, 10) first calls is_valid_point(NULL) to make sure that the user buffer is valid. Among one of the tests that is_pointer_valid() runs is checking to make sure that the pointer is NULL. So in this case, is_pointer_valid() would call sys_exit(-1), and the NULL pointer would terminate its process without corrupting the OS.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

Along with exit status, the process struct also stores a boolean
representing the process has loaded sucessfully and a semphore for
loading. When a thread calls exec it downs the loading semaphore for
the child process that gets created. After the child finishes calling
load(), it updates the value of load on the process struct and ups the
loading semaphore.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

When p calls wait(c) before c exits it downs a semaphore stored on the
process struct and sleeps until c ups the semaphore when it exits. If
p calls wait after c exits then the process struct where the semaphore
lives will still be on the heap. In this scenario, by the time p calls
wait, c will have already upped the semaphore (which is init to 0) so p
won't sleep when it calls sema down. The parent is always responsible
for freeing any process struct. If a parent dies before its child, its
child's process struct pointer will be set to null so that the child
does not try to access memory that has been freed. For threads that
aren't processes there is an is_process flag so that that they can
free their own process struct.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

Because filesys.c and file.c already provided such helpful lower-level functions, which made it very straightforward to interact with user memory using our approach of using only a simple lock, a valid pointer verifier, and a syscall dispatch table. 

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

The main disadvantage to our design for file descriptors is that they're placed in a list in their owner process's struct. In order to find a particular open file later, the OS must traverse this list, which may not be the most efficient method of finding a file, especially if the file was not accessed recently. We did design it so that more recently open files are towards the front of the list, which we hope will make average search times lower. As of now, we can see no disadvantages in our implementation of the file_descriptor struct. It has all the required elements to fulfill its function, and no added bells or whistles. There may be something lacking here, but we will have to discover this in future projects.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?
   
We used identity mapping.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?